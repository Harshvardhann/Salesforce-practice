# Unique name for this workflow
name: Pushing to Testing Org

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    push:
      branches: [ main ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      
# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v2
              with:
                node-version: '14'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
            
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.

            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the integration/qa org.

            # The steps to generate the url are here 
            # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

            # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
            # the sfdx project in the repositry, against the org from which the URL
            # was generated from. This works just like that, there's no need to create
            # connected apps or any else. 

            # The URL is stored in the Github Secret named SFDX_INTEGRATION_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  sfdx auth:jwt:grant --instanceurl https://login.salesforce.com --clientid 3MVG9n_HvETGhr3BaZdVEARq2E0Xdcs8WOzo8yLqeYnz8iYmUpUpTd5fBSeuRW98PTnRpXZVu4GifIbeAu98D --jwtkeyfile assets\server.key --username vaibhav.srivastavaknp-gha1@force.com --setalias TEST

            